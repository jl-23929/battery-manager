// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: battery.sql

package models

import (
	"context"
)

const getBattery = `-- name: GetBattery :one
SELECT battery_id, battery_name, brand, capacity, purchase_date, purchase_price, purchase_currency, competition_class, status, created, updated FROM battery
WHERE battery_id = ? LIMIT 1
`

func (q *Queries) GetBattery(ctx context.Context, batteryID string) (Battery, error) {
	row := q.db.QueryRowContext(ctx, getBattery, batteryID)
	var i Battery
	err := row.Scan(
		&i.BatteryID,
		&i.BatteryName,
		&i.Brand,
		&i.Capacity,
		&i.PurchaseDate,
		&i.PurchasePrice,
		&i.PurchaseCurrency,
		&i.CompetitionClass,
		&i.Status,
		&i.Created,
		&i.Updated,
	)
	return i, err
}

const listBatteries = `-- name: ListBatteries :many
SELECT battery_id, battery_name, brand, capacity, purchase_date, purchase_price, purchase_currency, competition_class, status, created, updated FROM battery
ORDER BY battery_id
`

func (q *Queries) ListBatteries(ctx context.Context) ([]Battery, error) {
	rows, err := q.db.QueryContext(ctx, listBatteries)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Battery
	for rows.Next() {
		var i Battery
		if err := rows.Scan(
			&i.BatteryID,
			&i.BatteryName,
			&i.Brand,
			&i.Capacity,
			&i.PurchaseDate,
			&i.PurchasePrice,
			&i.PurchaseCurrency,
			&i.CompetitionClass,
			&i.Status,
			&i.Created,
			&i.Updated,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
