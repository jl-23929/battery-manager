// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: battery_history.sql

package models

import (
	"context"
)

const getBatteryHistory = `-- name: GetBatteryHistory :one
SELECT id, battery_id, timestamp, comment, created, updated
FROM battery_history
WHERE id = ?
LIMIT 1
`

func (q *Queries) GetBatteryHistory(ctx context.Context, id string) (BatteryHistory, error) {
	row := q.db.QueryRowContext(ctx, getBatteryHistory, id)
	var i BatteryHistory
	err := row.Scan(
		&i.ID,
		&i.BatteryID,
		&i.Timestamp,
		&i.Comment,
		&i.Created,
		&i.Updated,
	)
	return i, err
}

const listBatteryHistory = `-- name: ListBatteryHistory :many
SELECT id, battery_id, timestamp, comment, created, updated
FROM battery_history
where battery_id = ?
ORDER BY timestamp desc
`

func (q *Queries) ListBatteryHistory(ctx context.Context, batteryID string) ([]BatteryHistory, error) {
	rows, err := q.db.QueryContext(ctx, listBatteryHistory, batteryID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []BatteryHistory
	for rows.Next() {
		var i BatteryHistory
		if err := rows.Scan(
			&i.ID,
			&i.BatteryID,
			&i.Timestamp,
			&i.Comment,
			&i.Created,
			&i.Updated,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
